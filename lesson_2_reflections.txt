1. What happens when you initialize a repository? Why do you need to do it?
A- A new empty repository is initialised, or an unversioned project is converted to a git repository. 
- We need it to create new version-controlled projects
-The good thing is that git does not require any pre-existing server or admin privileges. You dust have to cd into your project subdirectory and run git init, and you'll have a fully functional git repository.
-When you transform the current directory into a git repository, a .git subdirectory is added to the current directory making it possible to start recording versions of the project. 

2. How is the staging area different from the working directory and the repository? What value do you think it offers?
A- Files are modified in the working tree. Selectively stage only those changes you want to be part of your next commit (these go to the staging area). You do a commit, which takes the files as they are in the staging area and stores a snapshot permanently to your git directory.
- The value of this is that you get to carefully decide the files you want to be in a commit.

3. How can you use the staging area to make sure you have one commit per logical change?
A- You can save changes there. then use git diff --staged to view what you have in the staged area befire you commit.

4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
A- Branches are useful when you do not want change your code as such but just want a different version of it. ie when you want to keep old code but would like another version of the code. eg having code that gives an easier version of a game, etc. 
- This would because the old version is still very much the 'master', you just would like a different version of it

5. How do the diagrams help you visualize the branch structure?
A- With the branches, one is able to view the history and see which commits are on which brach and which commits are hidden

6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
A- The result of merging two branches is that one branch with all commits from both branches, keeping the name of the branch that we checkedout. 
- 

7. 
A-

